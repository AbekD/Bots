from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, ContextTypes
import random
import logging
logging.basicConfig(level=logging.INFO)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–æ–±—Ä–∞–∂–∞–ª–æ—Å—å –ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–∞–Ω–µ–µ
    if not context.user_data.get("start_shown", False):
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞
        user_name = update.effective_user.first_name or "–ò–≥—Ä–æ–∫"
        welcome_message = (
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üëã\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä–æ–≤–æ–π –±–æ—Ç. üéÆ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–∏–≥—Ä–∞—Ç—å –≤ –º–∏–Ω–∏-–∏–≥—Ä—ã:\n\n"
            "üé≤ –ö–æ—Å—Ç–∏\n"
            "üÉè –ö–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ 21\n"
            "üé∞ –†—É–ª–µ—Ç–∫–∞\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. –£–¥–∞—á–∏! üçÄ"
        )
        await update.message.reply_text(welcome_message)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–∫–∞–∑–∞–Ω–æ
        context.user_data["start_shown"] = True

    # –í—ã–≤–æ–¥ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    await send_game_menu(update)

async def send_game_menu(update: Update) -> None:
    # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä
    keyboard = [
        [InlineKeyboardButton("üé∞ –†—É–ª–µ—Ç–∫–∞", callback_data="game_roulette")],
        [InlineKeyboardButton("üÉè –ö–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ 21", callback_data="game_21")],
        [InlineKeyboardButton("üé≤ –ö–æ—Å—Ç–∏", callback_data="game_dice")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    if update.callback_query:
        # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É üéÆ:", reply_markup=reply_markup)
    else:
        # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É üéÆ:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä—ã
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞

     # –†—É–ª–µ—Ç–∫–∞
    if query.data == "game_roulette":
        await play_roulette(query, context)
    elif query.data.startswith("roulette_"):
        await roulette_category_handler(query, context)
    elif query.data.startswith("color_") or query.data.startswith("number_") or query.data.startswith("range_"):
        await roulette_result_handler(query, context)
    # –ö–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ 21
    elif query.data == "game_21":
        await play_21(query, context)
    # –ö–æ—Å—Ç–∏
    elif query.data == "game_dice":
        await play_dice(query, context)
    # –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
    elif query.data.startswith("play_again"):
        game = query.data.split("_")[-1]
        if game == "roulette":
            await play_roulette(query, context)
        elif game == "21":
            await play_21(query, context)
        elif game == "dice":
            await play_dice(query, context)
    # –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é
    elif query.data == "back_to_menu":
        await send_game_menu(update)

# –ö–Ω–æ–ø–∫–∏ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞" –∏ "–ù–∞–∑–∞–¥"
def end_game_buttons(game: str):
    keyboard = [
        [InlineKeyboardButton("–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"play_again_{game}")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã", callback_data="back_to_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –ò–≥—Ä–∞ –†—É–ª–µ—Ç–∫–∞
async def play_roulette(query, context) -> None:
    # –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø: –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∞–≤–∫–∏
    keyboard = [
        [InlineKeyboardButton("üé®–¶–≤–µ—Ç", callback_data="roulette_color")],
        [InlineKeyboardButton("üî¢–ß–∏—Å–ª–∞ (—á—ë—Ç–Ω–æ–µ/–Ω–µ—á—ë—Ç–Ω–æ–µ)", callback_data="roulette_number")],
        [InlineKeyboardButton("üßÆ–î–∏–∞–ø–∞–∑–æ–Ω (1-18, 19-36)", callback_data="roulette_range")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –∏–≥—Ä—ã", callback_data="back_to_menu")]
    ]
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å—Ç–∞–≤–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    context.user_data["roulette_stage"] = "category"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å—Ç–∞–≤–∫–∏
async def roulette_category_handler(query, context) -> None:
    if context.user_data.get("roulette_stage") != "category":
        return

    category = query.data
    context.user_data["roulette_category"] = category
    context.user_data["roulette_stage"] = "value"  # –ü–µ—Ä–µ—Ö–æ–¥ –∫–æ –≤—Ç–æ—Ä–æ–º—É —ç—Ç–∞–ø—É

    if category == "roulette_color":
        keyboard = [
            [InlineKeyboardButton("‚ô¶Ô∏è–ö—Ä–∞—Å–Ω—ã–π‚ô•Ô∏è", callback_data="color_red")],
            [InlineKeyboardButton("‚ô†Ô∏è–ß—ë—Ä–Ω—ã–π‚ô£Ô∏è", callback_data="color_black")],
            [InlineKeyboardButton("üü©–ó–µ—Ä–æüü©", callback_data="color_green")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="game_roulette")]
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif category == "roulette_number":
        keyboard = [
            [InlineKeyboardButton("–ß—ë—Ç–Ω–æ–µ", callback_data="number_even")],
            [InlineKeyboardButton("–ù–µ—á—ë—Ç–Ω–æ–µ", callback_data="number_odd")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="game_roulette")]
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–∏—Å–ª–∞ –¥–ª—è —Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif category == "roulette_range":
        keyboard = [
            [InlineKeyboardButton("1-18", callback_data="range_low")],
            [InlineKeyboardButton("19-36", callback_data="range_high")],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="game_roulette")]
        ]
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è —Å—Ç–∞–≤–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–≤–∫–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def roulette_result_handler(query, context) -> None:
    if context.user_data.get("roulette_stage") != "value":
        return

    user_choice = query.data
    category = context.user_data["roulette_category"]

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ä—É–ª–µ—Ç–∫–∏
    result_number = random.randint(0, 36)
    result_color = (
        "green" if result_number == 0 else
        "red" if result_number % 2 != 0 else
        "black"
    )

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∞
    won = False
    if category == "roulette_color":
        won = (
            (user_choice == "color_red" and result_color == "red") or
            (user_choice == "color_black" and result_color == "black") or
            (user_choice == "color_green" and result_color == "green")
        )

    elif category == "roulette_number":
        won = (
            (user_choice == "number_even" and result_number % 2 == 0 and result_number != 0) or
            (user_choice == "number_odd" and result_number % 2 != 0)
        )

    elif category == "roulette_range":
        won = (
            (user_choice == "range_low" and 1 <= result_number <= 18) or
            (user_choice == "range_high" and 19 <= result_number <= 36)
        )

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
    result_message = (
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä—É–ª–µ—Ç–∫–∏: {result_number} ({result_color}).\n"
        f"{'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!üéâ' if won else '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!üòû'}"
    )
    await query.edit_message_text(
        result_message,
        reply_markup=end_game_buttons("roulette")
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /hit (–¥–æ–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É)
async def hit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if "game_21" not in context.user_data:
        await update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É.")
        return

    user_data = context.user_data["game_21"]
    new_card = random.randint(1, 11)
    user_data["cards"].append(new_card)
    user_data["sum"] += new_card

    if user_data["sum"] > 21:
        await update.message.reply_text(
            f"–í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É {new_card}. –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {user_data['cards']} (—Å—É–º–º–∞: {user_data['sum']}). –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!üòû –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å /start.",reply_markup=end_game_buttons("21")
        )
        del context.user_data["game_21"]
    else:
        await update.message.reply_text(
            f"–í—ã –≤–∑—è–ª–∏ –∫–∞—Ä—Ç—É {new_card}. –í–∞—à–∏ –∫–∞—Ä—Ç—ã: {user_data['cards']} (—Å—É–º–º–∞: {user_data['sum']}). –•–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –µ—â—ë –∫–∞—Ä—Ç—É? –ù–∞–ø–∏—à–∏—Ç–µ /hit –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–≥—Ä—É —Å /stand."
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stand (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–±–æ—Ä)
async def stand(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if "game_21" not in context.user_data:
        await update.message.reply_text("–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É.")
        return

    user_data = context.user_data["game_21"]
    bot_sum = random.randint(17, 23)  # –°—É–º–º–∞ –∫–∞—Ä—Ç –±–æ—Ç–∞
    result = (
        "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!üéâ" if user_data["sum"] > bot_sum or bot_sum > 21
        else "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!üòû" if user_data["sum"] < bot_sum
        else "–ù–∏—á—å—è!ü§ù"
    )
    await update.message.reply_text(
        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {user_data['cards']} (—Å—É–º–º–∞: {user_data['sum']}). –ö–∞—Ä—Ç—ã –±–æ—Ç–∞: {bot_sum}. {result}\n"
        "–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É —Å /start.",reply_markup=end_game_buttons("21")
    )
    del context.user_data["game_21"]

# –ò–≥—Ä–∞ "–ö–∞—Ä—Ç–æ—á–Ω–∞—è –∏–≥—Ä–∞ 21"
async def play_21(query, context) -> None:
    user_cards = [random.randint(1, 11) for _ in range(2)]
    user_sum = sum(user_cards)
    await query.edit_message_text(
        f"–í–∞—à–∏ –∫–∞—Ä—Ç—ã: {user_cards}. –°—É–º–º–∞: {user_sum}. –•–æ—Ç–∏—Ç–µ –¥–æ–±—Ä–∞—Ç—å –∫–∞—Ä—Ç—É? –ù–∞–ø–∏—à–∏—Ç–µ /hit –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–≥—Ä—É —Å /stand.",
        reply_markup=end_game_buttons("21")
    )
    context.user_data["game_21"] = {"cards": user_cards, "sum": user_sum}

# –ò–≥—Ä–∞ "–ö–æ—Å—Ç–∏"
async def play_dice(query: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = query.message.chat_id
    
    # –ë—Ä–æ—Å–æ–∫ –¥–≤—É—Ö –∫—É–±–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä–æ–∫–∞
    player_dice_1 = await context.bot.send_dice(chat_id, emoji="üé≤")
    player_dice_2 = await context.bot.send_dice(chat_id, emoji="üé≤")
    player_score = player_dice_1.dice.value + player_dice_2.dice.value

    # –ë—Ä–æ—Å–æ–∫ –¥–≤—É—Ö –∫—É–±–∏–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞
    bot_dice_1 = await context.bot.send_dice(chat_id, emoji="üé≤")
    bot_dice_2 = await context.bot.send_dice(chat_id, emoji="üé≤")
    bot_score = bot_dice_1.dice.value + bot_dice_2.dice.value

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if player_score > bot_score:
        result = "–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏!üéâ"
    elif player_score < bot_score:
        result = "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!üòû"
    else:
        result = "–ù–∏—á—å—è!ü§ù"

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await query.edit_message_text(
        f"–í–∞—à–∏ –æ—á–∫–∏: {player_score} (üé≤ {player_dice_1.dice.value}, üé≤ {player_dice_2.dice.value})\n"
        f"–û—á–∫–∏ –±–æ—Ç–∞: {bot_score} (üé≤ {bot_dice_1.dice.value}, üé≤ {bot_dice_2.dice.value})\n"
        f"{result}",
        reply_markup=end_game_buttons("dice")
    )

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
if __name__ == "__main__":
    TOKEN = "YOUR_TOKEN" #–¢–æ–∫–µ–Ω –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
    app = ApplicationBuilder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(CommandHandler("hit", hit))
    app.add_handler(CommandHandler("stand", stand))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
